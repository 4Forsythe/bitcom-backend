generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  
  name          String?
  email         String      @unique
  phone         String?
  password      String
  role          Boolean     @default(false)
  isActive      Boolean     @default(false) @map("is_active")
  isSubscribed  Boolean     @default(true)  @map("is_subscribed")

  code          UserCode?
  cart          Cart[]
  wishlist      Wishlist[]
  orders        Order[]

  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt      @map("updated_at")

  @@map("users")
}

model UserCode {
  id                String        @id @default(cuid())

  code              String
  userId            String        @unique
  attempt           Int           @default(0)

  lastAttemptAt     DateTime      @default(now()) @map("last_attempt_at")

  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt         DateTime      @default(now()) @map("created_at")
  expiresAt         DateTime      @map("expires_at")

  @@map("user_codes")
}

model CartItem {
  id                 String       @id  @default(cuid())

  productId          String       @map("product_id")
  count              Int          @default(1)
  cartId             String       @map("cart_id")

  product            Product      @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cart               Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade)

  createdAt          DateTime     @default(now())   @map("created_at")
  updatedAt          DateTime     @updatedAt        @map("updated_at")

  @@map("cart_items")
}

model Cart {
  id                 String       @id              @default(cuid())

  items              CartItem[]
  total              Int          @default(0)
  token              String
  userId             String?      @map("user_id")

  user               User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt          DateTime     @default(now())  @map("created_at")
  updatedAt          DateTime     @updatedAt       @map("updated_at")

  @@map("carts")
}

model WishlistItem {
  id                 String       @id @default(cuid())

  productId          String       @map("product_id")
  wishlistId         String       @map("wishlist_id")

  product            Product      @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  wishlist           Wishlist     @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")

  @@map("wishlist_items")
}

model Wishlist {
  id          String    @id             @default(cuid())

  items       WishlistItem[]
  token       String
  userId      String?   @map("user_id")

  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt      @map("updated_at")

  @@map("wishlists")
}

model ProductCategory {
  id          String            @id @default(uuid())

  name        String
  imageUrl    String?           @map("image_url")
  parentId    String?           @map("parent_id")
  parent      ProductCategory?  @relation("ProductCategoryHierarchy", fields: [parentId], references: [id])
  sortOrder   Int               @map("sort_order")

  children    ProductCategory[] @relation("ProductCategoryHierarchy")
  products    Product[]

  @@map("product_categories")
  @@index([parentId, sortOrder])
}

model ProductImage {
  id              String          @id @default(uuid())

  url             String
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String          @map("product_id")
  sortOrder       Int             @map("sort_order")

  @@map("product_images")
  @@index([productId, sortOrder])
}

model Product {
  id              String           @id @default(cuid())
  slug            String

  name            String
  description     String?
  count           Int?
  price           Decimal          @db.Decimal(10,2)
  discountPrice   Decimal?         @db.Decimal(10,2)  @map("discount_price")
  images          ProductImage[]
  sku             String[]
  isArchived      Boolean          @default(false)    @map("is_archived")
  isPublished     Boolean          @default(false)    @map("is_published")
  category        ProductCategory  @relation(fields: [categoryId], references: [id])
  categoryId      String           @map("category_id")
  
  cartItems       CartItem[]
  wishlistItems   WishlistItem[]
  orderItems      OrderItem[]

  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt      @map("updated_at")
  archivedAt      DateTime?        @map("archived_at")

  @@map("products")
}

model OrderItem {
  id                 String       @id @default(cuid())

  count              Int          @default(1)
  productId          String       @map("product_id")
  orderId            String       @map("order_id")

  product            Product      @relation(fields: [productId], references: [id])
  order              Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Order {
  id                 String       @id @default(cuid())

  items              OrderItem[]
  total              Decimal      @db.Decimal(10,2)

  customerName       String       @map("customer_name") 
  customerEmail      String       @map("customer_email")
  customerPhone      String       @map("customer_phone")
  address            String?
  comment            String?
  token              String
  userId             String?      @map("user_id")
  paymentId          String?      @map("payment_id")

  status             String       @default("Обрабатывается")
  gettingMethod      String       @map("getting_method")
  paymentMethod      String       @map("payment_method")

  user               User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt      @map("updated_at")
  archivedAt         DateTime?    @map("archived_at")

  @@map("orders")
}